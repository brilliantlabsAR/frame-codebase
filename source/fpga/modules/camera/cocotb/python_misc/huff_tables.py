class HuffmanTable:
    def __init__(self, table):
        self.offsets = []
        self.symbols = []
        self.codes = []
        self.set = False
        for i, j in zip(['offsets', 'symbols', 'codes', 'set'], table):
            setattr(self, i, j)
            

# offset//codes
hDCTableY = [
    [ 0, 0, 1, 6, 7, 8, 9, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12 ],
    [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b ],
    [],
    False
]

hDCTableCbCr = [
    [ 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 12, 12, 12, 12 ],
    [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b ],
    [],
    False
]

hACTableY = [
    [ 0, 0, 2, 3, 6, 9, 11, 15, 18, 23, 28, 32, 36, 36, 36, 37, 162 ],
    [
        0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
        0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
        0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
        0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
        0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
        0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
        0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
        0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
        0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
        0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
        0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
        0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
        0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
        0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
        0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
        0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa
    ],
    [],
    False
]

hACTableCbCr = [
    [ 0, 0, 2, 3, 5, 9, 13, 16, 20, 27, 32, 36, 40, 40, 41, 43, 162 ],
    [
        0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
        0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
        0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
        0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
        0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
        0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
        0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
        0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
        0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
        0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
        0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
        0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
        0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
        0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
        0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
        0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
        0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
        0xf9, 0xfa
    ],
    [],
    False
]

dcTables = [HuffmanTable(i) for i in [hDCTableY, hDCTableCbCr]]
acTables = [HuffmanTable(i) for i in [hACTableY, hACTableCbCr]]

# generate all Huffman codes based on symbols from a Huffman table
def generateCodes(hTable):
    code = 0
    for i in range(16):
        for j in range(hTable.offsets[i], hTable.offsets[i + 1]):
            hTable.codes.append(code)
            code += 1
        code <<= 1;


def generateCodes2(tables):
    for t in tables:
        if not t.set:
            generateCodes(t)
            t.set = True


generateCodes2(dcTables)
generateCodes2(acTables)


def make_vlog(t, x):
    if x == 'dc':
        x = 12
        e = 12
    elif x == 'ac':
        x = 16
        e = 256
    print (f'logic [{4+x-1}:0] ht[{e-1}:0]; /* synthesis syn_romstyle = "Logic" */')
    print ('always_comb begin')
    print (f'    for (int i=0; i<{e}; i++) ht[i] =  20\'h x;')
    #print ('    case(symbol)')
    for i in range(16):
        for j in range(t.offsets[i], t.offsets[i + 1]):
            k = f'{t.codes[j]:b}'
            k = '0'*(i + 1 - len(k)) + k
            #print (f'        8\'h {t.symbols[j]:02x} : ht = {{1\'b 1, 4\'d {i:>2d}, 16\'b {k:>16s}}};')
            a = f'8\'h {t.symbols[j]:02x}'
            b = ''
            if x == 12:
                a = f'4\'h {t.symbols[j]:01x}'
                b = ' 4\'b 0,'
            #print (f'        {a} : ht = {{4\'d {i:>2d}, {x}\'b {k:s}}};')
            print (f'    ht[{a}] = {{4\'d {i:>2d},{b} {x}\'b {k:s}}};')
    #print ('        default : ht = 21\'h 0;')
    #print (f'        default : ht = {x+4}\'h x;')
    #print ('    endcase')
    print ('end')


make_vlog(dcTables[0], 'dc')
make_vlog(dcTables[1], 'dc')
make_vlog(acTables[0], 'ac')
make_vlog(acTables[1], 'ac')
